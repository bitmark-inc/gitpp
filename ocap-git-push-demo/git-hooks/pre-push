#!/bin/sh

# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#

remote="${1}"
url="${2}"

# uncomment to enable
# ===================
#debug=yes
verbose=yes
# ===================

if [ X"${verbose}" = X"yes" ]
then
  printf 'script: %s\n' "${0}"
  printf 'script: git repo: %s @ %s\n' "${remote}" "${url}"
fi

# internal parameters
tmp_signed_invocation="$(mktemp tmp-signed-invocation-XXXXXXXX)"
capability_notes=caps

# accept a yes/no response from /dev/tty
GetYorN() {
  local yorn junk prompt

  prompt="${1}"
  while :
  do
    read -p "${prompt}: [Y/N]? " yorn junk < /dev/tty
    case "${yorn}" in
      ([yY]|[yY][eE][sS])
        return 0
        ;;
      ([nN]|[nN][oO])
        return 1
        ;;
      (*)
        printf 'please answer yes or no\n'
        ;;
    esac
  done
  return 1
}

# accumulate all branches and commits hashes for attaching notes
remote_refs=''
notes_ids=''
while read local_ref local_sha remote_ref remote_sha
do
  if [ X"${verbose}" = X"yes" ]
  then
    printf 'script: local_ref: %s [SHA:%s]  remote_ref: %s [SHA:%s]\n' "${local_ref}" "${local_sha}" "${remote_ref}" "${remote_sha}"
  fi

  for rev in $(git rev-list "${local_sha}...${remote_sha}")
  do
    printf 'script: object to commit: %s\n' "${rev}"
    notes_ids="${notes_ids} ${rev}"
  done

  remote_refs="${remote_refs} ${remote_ref}"
done

[ X"${debug}" = X"yes" ] && set -x


sign="node --trace-warnings @@JS_DIR@@/sign-invocation.js"
invoke="node --trace-warnings @@JS_DIR@@/invoke.js"

[ X"${verbose}" = X"yes" ] && sign="${sign} -v" && invoke="${invoke} -v"
[ X"${debug}" = X"yes" ] && sign="${sign} -v -v" && invoke="${invoke} -v -v"


rm -f "${tmp_signed_invocation}"

cleanup() {
  rm -f "${tmp_signed_invocation}"
}
trap cleanup INT EXIT

# simulate secure enclave
sign_invocation() {

  local url="${1}"; shift
  local name="${1}"; shift
  local email="${1}"; shift

  # user's did:key and keyId(always 0 for did:key:)
  local USER_DID='did:key:z6MkqyrirHAq8Acicq1FyNJGd9R7D1DW7Q8A3v1qqZfP4pdY'
  local USER_KID=0

  local secrets_file="${XDG_CONFIG_HOME}/gitpp/secrets.json"
  local secrets_alt="${HOME}/.gitpp/secrets.json"

  local capability_file="${XDG_CONFIG_HOME}/gitpp/capabilities.json"
  local capability_alt="${HOME}/.gitpp/capabilities.json"

  local item
  for item in secrets capability
  do
    eval local file=\"\${${item}_file}\"
    eval local alt=\"\${${item}_alt}\"
    if [ -f "${file}" ]
    then
      printf 'ENCLAVE: cannot load %s from: %s\n' "${item}" "${file}"
    elif [ -f "${alt}" ]
    then
      file="${alt}"
      eval "${item}_file=\"${alt}\""
      printf 'ENCLAVE: %s from: %s\n' "${item}" "${file}"
    else
      printf 'ENCLAVE: no %s found in: %s\n' "${item}" "${file}"
      printf 'ENCLAVE: or in alternate file: %s\n' "${alt}"
      return 1
    fi
  done

  printf 'ENCLAVE: push to git repo: %s\n' "${url}"
  printf 'ENCLAVE: as user:          %s <%s>\n' "${name}" "${email}"
  printf 'ENCLAVE: for branches:     %s\n' "${*}"

  local filter='
    def repo($url): $url |
      sub("^ssh://git@(?<h>[a-zA-Z.0-9_-]*):(?<a>[^/]*)/(?<r>[^?]*)[?]key=.*$";
          "\(.h)|\(.a)|\(.r)") |
      sub("^ssh://(?<p>/.*)/(?<r>[^/?]*)[?]key=.*$";
          "LOCAL|\(.p)|\(.r)")
    ;

    def bre($re):
      [$re] | flatten | reduce .[] as $r (
        "";
        . + ($r | gsub("[\\^$]";"") | sub("refs/heads/";"")) + ","
      ) | sub(",$";"")
    ;

    def get_branches($caveat):
      [$caveat] | flatten(1) | reduce .[] as $item (
        "";
        if "git:branchCaveat" == $item.type then . + bre($item.branchRegExp) else . end
      )
    ;

    # result <id>|some|info|here!TG=<target>!RE=<re>,<re>,…
    reduce .[] as $item (
      "";
      . + $item.id + "|"
      + repo($item.invocationTarget) + "!TG="
      + $item.invocationTarget + "!RE="
      + get_branches($item.caveat)
      + "\n"
    )
  '

  # check for zenity and X11 available
  local zenity="$(command -v zenity)"
  [ -x "${zenity}" ] || zenity=''
  [ -z "${DISPLAY}" ] && zenity=''

  local zenity_args=''
  local n=0
  printf 'ENCLAVE: ----- Choose Capability -----\n'
  local capability=''
  for capability in $(jq --raw-output "${filter}" "${capability_file}")
  do
    n=$((n + 1))
    eval local cap_"${n}=\"${capability}\""
    local id="${capability%%|*}"
    capability="${capability#*|}"
    local re="${capability#*!RE=}"
    capability="${capability%!TG=*}"
    local info="$(printf '%s' "${capability}" | tr '|' ' ')"
    if [ -n "${zenity}" ]
    then
      zenity_args="${zenity_args} FALSE ${n} ${info} ${re}"
    else
      # strip target and add back re for text menu
      printf 'ENCLAVE: %2d: %s → %s\n' "${n}" "${info}" "${re}"
    fi
  done

  if [ -n "${zenity}" ]
  then
    local w=$((200 + 400))
    local h=$((n * 14 + 200))
    n="$(${zenity} \
           --width="${w}" --height="${h}" \
           --list --text='Select capability' \
           --print-column=2 \
           --hide-column=2 \
           --radiolist \
           --column='Select' --column='ID' --column='Host' --column='Account' \
           --column='Repository' --column='Branches' \
           ${zenity_args})"
  else
    printf 'ENCLAVE: -----------------------------\n'
    read -p 'ENCLAVE: select capability: ' n < /dev/tty
  fi

  eval local r=\"\${cap_${n}}\"
  local capability_id="${r%%|*}"
  r="${r#*|}"
  r="${r%!RE=*}"
  local capability_target="${r#*!TG=}"
  r="${r%!TG=*}"
  local capability_info="$(printf '%s' "${r}" | tr '|' ' ')"

  if [ -z "${capability_id}" ]
  then
    printf 'ENCLAVE: rejected all capabilities\n'
    return 1
  fi

  if [ -n "${zenity}" ]
  then
    local d="$(printf '<span font="18"><b>sign invocation using capability:\n\n</b></span><span font="16">to push to: %s\n\n</span><span font="14">( %s )</span>' \
               "${capability_info}" "${capability_id}")"
    ${zenity} --width=500 --height=200 --question --text="${d}" --default-cancel || return 1
  else
    printf 'ENCLAVE: using capability: %s\n' "${capability_id}"
    printf 'ENCLAVE:       to push to: %s\n' "${capability_info}"
    GetYorN 'ENCLAVE: sign invocation' || return 1
  fi

  ${sign} \
    --capability-url="${capability_id}" \
    --target="${capability_target}" \
    --secrets-file="${secrets_file}" \
    --user="${USER_DID}" \
    --user-key="${USER_KID}" > "${tmp_signed_invocation}"
  return $?
}

# ask envclave sign then invoke
if [ -z "${remote_refs}" ]
then
  printf 'script: nothing to push\n'
  exit 0
else
  name="$(git config --get user.name)"
  email="$(git config --get user.email)"

  if ! sign_invocation "${url}" "${name}" "${email}" ${remote_refs}
  then
    printf 'script: signing failed\n'
    exit 2
  fi

  if ! ${invoke} < "${tmp_signed_invocation}" ${remote_refs}
  then
    printf 'script: push is forbidden\n'
    exit 1
  fi
fi

# save the signed invocations to the commits notes
git notes --ref="${capability_notes}" prune
for rev in ${notes_ids}
do
  printf 'script: adding capability note to: %s\n' "${rev}"
  (
    printf -- 'Note for %s added by %s <%s>\n' "${rev}" "${name}" "${email}"
    printf -- '-----BEGIN CAPABILITY-----\n'
    b64encode -r invocation < "${tmp_signed_invocation}"
    printf -- '-----END CAPABILITY-----\n'
  ) | git notes --ref="${capability_notes}" add --force --file -
done

git push --no-verify origin refs/notes/caps

exit 0
